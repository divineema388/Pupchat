name: Java Android CI Build

# Workflow optimized for Java-based Android projects
on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch: # Manual trigger

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        java-version: [11, 17] # Test with multiple Java versions
        
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up JDK for Java Android development
      # Java 11 is minimum for modern Android Gradle Plugin
      # Java 17 is recommended for newer projects
      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'

      # Setup Android SDK
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 33
          build-tools: 33.0.2
          ndk-version: 25.2.9519653

      # Cache Gradle dependencies for faster builds
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Make gradlew executable
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # Validate Gradle wrapper
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      # Check for Java compilation issues
      - name: Compile Java sources
        run: ./gradlew compileDebugJavaWithJavac --stacktrace

      # Run Java-specific lint checks
      - name: Run Android Lint for Java
        run: ./gradlew lintDebug --stacktrace
        continue-on-error: true # Don't fail build on lint warnings

      # Run unit tests (if any)
      - name: Run Java Unit Tests
        run: ./gradlew testDebugUnitTest --stacktrace
        continue-on-error: true

      # Build debug APK
      - name: Build Debug APK (Java)
        run: ./gradlew assembleDebug --stacktrace --info
        env:
          GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx2048m -XX:+UseParallelGC"

      # Verify APK was created
      - name: Verify APK exists
        run: |
          if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
            echo "‚úÖ Debug APK created successfully"
            ls -la app/build/outputs/apk/debug/
          else
            echo "‚ùå Debug APK not found"
            echo "Available files:"
            find . -name "*.apk" -type f
            exit 1
          fi

      # Upload Debug APK
      - name: Upload Java Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: java-debug-apk-jdk${{ matrix.java-version }}
          path: app/build/outputs/apk/debug/app-debug.apk
          retention-days: 30

      # Optional: Build release APK (unsigned)
      # Uncomment the following steps if you want to build release APK
      # - name: Build Release APK (Java)
      #   run: ./gradlew assembleRelease --stacktrace
      #   continue-on-error: true
      
      # - name: Upload Java Release APK
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: java-release-apk-jdk${{ matrix.java-version }}
      #     path: app/build/outputs/apk/release/app-release-unsigned.apk
      #   if: success()

  # Additional job to analyze Java code quality
  code-quality:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        
      # Check for common Java issues
      - name: Java Code Analysis
        run: |
          echo "üìä Analyzing Java code structure..."
          find . -name "*.java" -type f | wc -l | xargs echo "Java files found:"
          find . -name "*.kt" -type f | wc -l | xargs echo "Kotlin files found:"
          
          # Check for Java-specific patterns
          echo "üîç Checking for Java best practices..."
          if find . -name "*.java" -exec grep -l "System.out.print" {} \;; then
            echo "‚ö†Ô∏è Found System.out.print statements - consider using Android Log instead"
          fi
        continue-on-error: true
